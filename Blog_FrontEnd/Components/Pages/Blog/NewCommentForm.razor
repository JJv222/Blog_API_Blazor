@using ModelsLibrary.Dto
@inject NavigationManager NavigationManager

@if (DisplayForm)
{
    <EditForm Model="@NewComment" OnValidSubmit="CheckNewComment">
        <div class="mb-3">
            <label>Content</label>
            <InputText @bind-Value="NewComment.Content" class="form-control" placeholder="New Content.." />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button type="submit" class="btn btn-primary">Submit</button>
        </div>
        <div class="mb-3 text-center">
            <span class="text-danger">@ErrorMessage</span>
        </div>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>
    <button class="btn btn-warning mb-3" @onclick="CancelForm">Cancel Adding New Post</button>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="(()=>DisplayForm=!DisplayForm)">Add New Comment</button>
}

@code {
    private bool DisplayForm { get; set; }

    [CascadingParameter]
    public PostDto post { get; set; }

    [CascadingParameter]
    public HttpClient httpClient { get; set; }

    [SupplyParameterFromForm]
    private CommentDto NewComment { get; set; } = new CommentDto();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public EventCallback<bool> AddedComment { get; set; }

    private string? ErrorMessage { get; set; }



    //Methods
    private void CancelForm()
    {
        DisplayForm = false;
        NewComment = new CommentDto();
    }

    private async Task CheckNewComment()
    {
        if(string.IsNullOrEmpty(NewComment.Content)){
            return;
        }

        var authenticationState = await authenticationStateTask;
        string Username = authenticationState.User.Identity.Name;

        NewComment.Date = DateTime.Now;

        var response = await httpClient.PostAsJsonAsync($"https://localhost:44321/Comment/api/CreateComment/PostId={post.Id}&Username={Username}", NewComment);



        if(response.IsSuccessStatusCode)
        {
            await AddedComment.InvokeAsync(true);
        }
        else
        {
            ErrorMessage = "Error creating comment";
        }
        CancelForm();
    }
}
