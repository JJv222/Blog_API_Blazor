@using Microsoft.AspNetCore.Authorization
@using ModelsLibrary.Enums
@using ModelsLibrary.PostDto
@using ModelsLibrary.UserDto
@inject NavigationManager NavigationManager
@attribute [Authorize]

@if (DisplayForm)
{
    <EditForm Model="@NewPost" OnValidSubmit="CheckNewPost">
        <div class="mb-3">
            <label>Title</label>
            <InputText @bind-Value="NewPost.Title" class="form-control" placeholder="New Post.." />
        </div>
        <div class="mb-3">
            <label>Content</label>
            <InputText @bind-Value="NewPost.Content" class="form-control" placeholder="New Content.." />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button type="submit" class="btn btn-primary">Submit</button>
        </div>
        <div class="mb-3 text-center">
            <span class="text-danger">@ErrorMessage</span>
        </div>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>
    <button class="btn btn-warning" @onclick="CancelForm">Cancel Adding New Post</button>
}
else
{
    <button class="btn btn-primary" @onclick="(()=>DisplayForm=!DisplayForm)">Add New Post</button>
}


@code {
    private bool DisplayForm { get; set; }

    [CascadingParameter]
    public string ApiLink { get; set; }

    [CascadingParameter]
    public HttpClient httpClient { get; set; }

    [SupplyParameterFromForm]
    private PostDtoCreateRequest NewPost { get; set; } = new PostDtoCreateRequest();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        DisplayForm = false;
    }

    private async Task CheckNewPost()
    {
        if (string.IsNullOrEmpty(NewPost.Title) || string.IsNullOrEmpty(NewPost.Content)){
            return;
        }

        var authenticationState = await authenticationStateTask;
        var CurrentUser = new UserDto()
            {
                Username = authenticationState.User.Identity.Name,
                Role = EnumConverter.StringToEnum(authenticationState.User.Claims.FirstOrDefault(c => c.Type == "role")?.Value),
                Email = authenticationState.User.Claims.FirstOrDefault(c => c.Type == "email")?.Value
            };
        NewPost.User = CurrentUser;
        NewPost.Date = DateTime.Now;
        //Post method
        var response = await httpClient.PostAsJsonAsync(ApiLink + "Post/Create",NewPost ); 

        if(response.IsSuccessStatusCode)
            NavigationManager.NavigateTo("/Blog", true);
        else
        {
            ErrorMessage = "Error creating post. Please try again.";   
        }
    }

    private void CancelForm()
    {
        DisplayForm = false;
        NewPost = new PostDtoCreateRequest();
    }
}
