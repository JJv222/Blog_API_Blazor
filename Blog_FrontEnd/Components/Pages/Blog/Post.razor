<!-- PostPage.razor -->
@using System.Collections.Generic
@using ModelsLibrary.CommentDto
@using ModelsLibrary.Enums
@using ModelsLibrary.PostDto
@using ModelsLibrary.UserDto

<div class="container mt-5">
    @if (post != null)
    {
        <div class="row">
            <div class="col-md">
                <div class="d-flex justify-content-end mb-3">
                    <button class="active btn btn-sm btn-outline-secondary" @onclick="()=>ReturnToPosts.InvokeAsync()">Back to Posts</button>
                </div>
                <div class="card mb-4">
                    <div class="card-body">
                        <h2 class="card-title">@post.Title</h2>
                        <p class="card-text">@post.Content</p>
                        <div class="row">
                            <div class="col">
                                <p class="card-text" style="font-style:italic"><small class="text-muted">Posted by: @post.User.Username</small></p>
                                <p class="card-text" style="font-style:italic"><small class="text-muted">Email: @(post.User.Email ?? "No email")</small></p>
                            </div>
                            <div class="col">
                                <p class="card-text" style="text-align:right; font-style:italic"><small class="text-muted">Date: @post.Date</small></p>
                            </div>
                        </div>
                        <AuthorizeView>

                            @if (post.User.Username == CurrentUser.Username || EnumConverter.IsAdmin(CurrentUser.Role) || EnumConverter.IsModerator(CurrentUser.Role))
                            {
                                if (!IsEditPost)
                                {
                                    <button class="active btn btn-sm btn bg-warning" @onclick="(()=>EditPost(post))">Edit</button>
                                }
                                else if (post.Id == EditetPost.Id)
                                {
                                    <EditPostForm isEdit="IsEditPost" EditetPost="EditetPost" EditetCom="RefreshPost" />
                                }
                            }
                        </AuthorizeView>
                    </div>
                </div>

                <h3 class="mb-3">Comments</h3>
                <AuthorizeView>
                    <CascadingValue Value="CurrentUser">
                    <NewCommentForm AddedComment="RefreshPost" PostId="post.Id"></NewCommentForm>
                    </CascadingValue>
                </AuthorizeView>
                @if(post.Comments.Count > 0){
                    @foreach (var comment in post.Comments)
                    {
                        <div class="card mb-3">
                            <div class="card-body">
                                <p class="card-text">@comment.Content</p>
                                <div class="row">
                                    <div class="col">
                                        <p class="card-text" style="font-style:italic">
                                            <small class="text-muted">Commented by: @(comment.User?.Username ?? "Unknown User")</small>
                                        </p>
                                        <p class="card-text"  style="font-style:italic">
                                            <small class="text-muted">Email: @(comment.User?.Email ?? "No email")</small>
                                        </p>
                                     </div>
                                    <div class="col">
                                        <p class="card-text" style="text-align:right; font-style:italic">
                                            <small class="text-muted">Date: @comment.Date</small>
                                        </p>
                                    </div>
                                </div>
                                <AuthorizeView>

                                    @if (comment.User.Username == CurrentUser.Username || EnumConverter.IsAdmin(CurrentUser.Role) || EnumConverter.IsModerator(CurrentUser.Role))
                                    {
                                        if (!IsEditComment)
                                        {
                                            <button class="active btn btn-sm btn bg-warning" @onclick="(()=>EditComment(comment))">Edit</button>
                                        }
                                        else if(comment.Id == EditetComment.Id)
                                        {
                                            <EditCommentForm isEdit="IsEditComment" EditetComment="EditetComment" EditetCom="RefreshPost" />
                                        }
                                    }
                                </AuthorizeView>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="mb-3">
                    <p class="fst-italic">No comments yet...</p>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <p>Loading...</p>
    }
</div>

@code {
    public bool IsEditComment { get; set; }
    public CommentDtoPostResponse EditetComment { get; set; }
    public bool IsEditPost { get; set; }
    public PostDtoPostResponse EditetPost { get; set; }


    [CascadingParameter]
    public UserDto CurrentUser { get; set; }

    [CascadingParameter]
    public string ApiLink { get; set; }

    [CascadingParameter]
    public HttpClient httpClient { get; set; }

    [CascadingParameter]
    public PostDtoPostResponse post { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public EventCallback ReturnToPosts { get; set; }

    [Parameter]
    public EventCallback<int> PostHasBeenEdited { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsEditComment = false;
        IsEditPost = false;

        await base.OnInitializedAsync();

        var authenticationState = await authenticationStateTask;
        CurrentUser =new UserDto()
            {
                Username = authenticationState.User.Identity.Name,
                Role = EnumConverter.StringToEnum(authenticationState.User.Claims.FirstOrDefault(c => c.Type == "role")?.Value),
                Email = authenticationState.User.Claims.FirstOrDefault(c => c.Type == "email")?.Value
            };
    }
    private void EditComment(CommentDtoPostResponse EditCommment)
    {
        EditetComment = EditCommment;
        IsEditComment = true;
    }

    private void EditPost(PostDtoPostResponse EditPost)
    {
        EditetPost = EditPost;
        IsEditPost = true;
    }

    private async Task RefreshPost()
    {
        if (IsEditPost) await PostHasBeenEdited.InvokeAsync(EditetPost.Id);
        post = await httpClient.GetFromJsonAsync<PostDtoPostResponse>(ApiLink + "Post/GetDetails/"+post.Id.ToString());
        EditetComment = new CommentDtoPostResponse();
        EditetPost = new PostDtoPostResponse();
        IsEditComment = false;
        IsEditPost = false;
    }
}
