@page "/Blog"

@using Microsoft.AspNetCore.Authorization
@using ModelsLibrary.Dto
@rendermode InteractiveServer

@if(posts is not null)
{
   <CascadingValue Value="@httpClient">
   @if(DisplayPosts){
       <AuthorizeView Roles="Admin,User">
            <NewPostForm></NewPostForm>
       </AuthorizeView>
        <div class="row m-2">
        @foreach(var post in posts)
        {
            <PostPreview post="@post" ReturnPostId="SetId"></PostPreview>
        }
        </div>
   }
   else
   {
       <CascadingValue Value="@post">
       <Post ReturnToPosts="BackToPosts"></Post>
        </CascadingValue>
   }
    </CascadingValue>
}


@code {
    [CascadingParameter]
    public HttpClient httpClient { get; set; }

    [CascadingParameter]
    public PostDto post { get; set; }

    [Parameter]
    public int PostId { get; set; }

    private bool DisplayPosts;

    private List<PostDto> posts = new List<PostDto>();

    protected override async Task OnInitializedAsync()
    {
        httpClient = new HttpClient();
        PostId = 0;
        DisplayPosts = true;
        posts = await httpClient.GetFromJsonAsync<List<PostDto>>("https://localhost:44321/Post/api/GetAllPosts");
    }

    private void SetId(int iD)
    {
        PostId = iD;
        post=posts.Find(p=>p.Id==PostId);
        DisplayPosts = false;
    }

    private void BackToPosts()
    {
        DisplayPosts = true;
        post = null;
        PostId = 0;
    }

}
