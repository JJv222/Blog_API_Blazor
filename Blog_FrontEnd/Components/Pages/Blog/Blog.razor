@page "/Blog"

@using Microsoft.AspNetCore.Authorization
@using ModelsLibrary.PostDto
@rendermode InteractiveServer

@if(posts is not null)
{
    <CascadingValue Value="@ApiLink">
   <CascadingValue Value="@httpClient">
   @if(DisplayPosts){
       <AuthorizeView Roles="Admin,User">
            <NewPostForm></NewPostForm>
       </AuthorizeView>
        <div class="row m-2">
        @foreach(var _post in posts)
        {
            <PostPreview post="@_post" ReturnPostId="SetId"></PostPreview>
        }
        </div>
   }
   else
   {
       <CascadingValue Value="@post">
       <Post ReturnToPosts="BackToPosts" PostHasBeenEdited="RefreshAfterPostEdit" PostHasBeenDeleted="RefreshAfterPostDelete" ></Post>
        </CascadingValue>
   }
    </CascadingValue>
    </CascadingValue>
}


@code {
    [CascadingParameter]
    public string ApiLink { get; set; }

    [CascadingParameter]
    public HttpClient httpClient { get; set; }

    [CascadingParameter]
    public PostDtoPostResponse post { get; set; }

    public int PostId { get; set; }

    private bool DisplayPosts;

    private List<PostDtoBlogResponse> posts = new List<PostDtoBlogResponse>();

    protected override async Task OnInitializedAsync()
    {
        ApiLink = "https://localhost:44321/api/";
        httpClient = new HttpClient();
        PostId = 0;
        DisplayPosts = true;
        posts = await httpClient.GetFromJsonAsync<List<PostDtoBlogResponse>>(ApiLink + "Post/GetBlog");
    }

    private async Task SetId(int iD)
    {
        PostId = iD;
        DisplayPosts = false;
        post = await httpClient.GetFromJsonAsync<PostDtoPostResponse>(ApiLink + "Post/GetDetails/" + PostId.ToString());
    }

    private void BackToPosts()
    {
        DisplayPosts = true;
        post = null;
        PostId = 0;
    }
    private async Task RefreshAfterPostEdit(int id)
    {
        PostDtoBlogResponse post = await httpClient.GetFromJsonAsync<PostDtoBlogResponse>(ApiLink + "Post/GetPostWhenUpdated/" + id.ToString());
        var index = posts.FindIndex(p => p.Id == id);
        posts[index] = post;
        StateHasChanged();
    }
    private async Task RefreshAfterPostDelete()
    {
        posts = await httpClient.GetFromJsonAsync<List<PostDtoBlogResponse>>(ApiLink + "Post/GetBlog");
        StateHasChanged();
    }
}
