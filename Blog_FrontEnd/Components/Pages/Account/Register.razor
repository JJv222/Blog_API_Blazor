@page "/register"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using ModelsLibrary.Authentication
@using System.Security.Claims
@using ModelsLibrary.Enums
@using ModelsLibrary.UserDto
@inject NavigationManager NavigationManager

<h3>Register</h3>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Your Username.." />
                <ValidationMessage For="@(() => Model.Username)" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" type="password" placeholder="Your Password.." />
                <ValidationMessage For="@(() => Model.Password)" />
            </div>
            <div class="mb-3">
                <label>E-mail</label>
                <InputText @bind-Value="Model.Email" class="form-control" placeholder="Your E-mail.." />
                <ValidationMessage For="@(() => Model.Email)" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@ErrorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Register</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public UserDtoPostRequest Model { get; set; } = new();
    private string? ErrorMessage { get; set; }
    public HttpClient httpClient = new HttpClient();

    private async Task Authenticate()
    {
        UserDtoPostRequest? userAccount = null;

            await httpClient.PostAsJsonAsync<UserDtoPostRequest>($"https://localhost:44321/api/User/CreateUser", Model);
        
        NavigationManager.NavigateTo("/login",true);
    }

}