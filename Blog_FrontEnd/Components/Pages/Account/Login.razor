@page "/login"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using ModelsLibrary.Authentication
@using System.Security.Claims
@using ModelsLibrary.Enums
@using ModelsLibrary.UserDto
@inject NavigationManager NavigationManager

<h3>Login</h3>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username" />
                <ValidationMessage For="@(() => Model.Username)" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" type="password" placeholder="Password" />
                <ValidationMessage For="@(() => Model.Password)" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@ErrorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginView Model { get; set; } = new();
    private string? ErrorMessage { get; set; }
    public HttpClient httpClient = new HttpClient();

    private async Task Authenticate()
    {
        UserDtoAuth? userAccount = null;
        try
        {
            userAccount = await httpClient.GetFromJsonAsync<UserDtoAuth>($"https://localhost:44321/api/User/GetAuth={Model.Username}");
        }
        catch (Exception ex)
        {
            ErrorMessage = "Invalid username or password";
            return;
        }
        if (userAccount is null || userAccount.Password != Model.Password)
        {
            ErrorMessage = "Invalid username or password";
            return;
        }
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, userAccount.Username),
            new Claim(ClaimTypes.Role, EnumConverter.EnumToString(userAccount.Role))
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        NavigationManager.NavigateTo("/");
    }

}